#include "U8glib.h"
U8GLIB_SSD1306_128X64 u8g(U8G_I2C_OPT_NONE);
#define setFont_L u8g.setFont(u8g_font_7x13)
 const uint8_t rock_bitmap[] U8G_PROGMEM = {
  0x86,         // 10000110
  0xfc,          // 11111100
  0xfe,         // 11111110
  0xfc,         // 11111100
  0xfe,         // 011111110
  0xfc,         // 11111100
  0x86           // 10000110
};
const uint8_t plane_bitmap[] U8G_PROGMEM = {
  0x86,         // 10000110
  0xfc,          //11111100
  0xfe,         // 11111110
  0xfc,         // 11111100
  0xfe,         // 011111110
  0xfc,         // 11111100
  0x86           //10000110
};
const uint8_t snow_bitmap[] U8G_PROGMEM = {
  0x99,
  0x5a,
  0x18,
  0xe7,
  0xe7,
  0x18,
  0x5a,
  0x99
};
const uint8_t mon1_bitmap[] U8G_PROGMEM = {
  0x8e,
  0x5a,
  0x3b,
  0x7f,
  0x7f,
  0x3b,
  0x5a,
  0x8e
};
const uint8_t mon2_bitmap[] U8G_PROGMEM = {
  0x3c,
  0x75,
  0xf5,
  0x7f,
  0xde,
  0x7f,
  0xf5,
  0x75,
  0x3c
};
const uint8_t mon3_bitmap[] U8G_PROGMEM = {
  0x8e,
  0xfc,
  0x16,
  0x3f,
  0x3f,
  0x16,
  0xfc,
  0x8e
};
const uint8_t mon4_bitmap[] U8G_PROGMEM = {
  0x39,
  0x6a,
  0xec,
  0xfc,
  0xfc,
  0xec,
  0x6a,
  0x39
};
const uint8_t mon5_bitmap[] U8G_PROGMEM = {
  0x31,
  0x9d,
  0xf7,
  0xfe,
  0xfe,
  0xf7,
  0x9d,
  0x31
};
const uint8_t mon6_bitmap[] U8G_PROGMEM = {
  0x3c,
  0x66,
  0xe6,
  0x7f,
  0xfe,
  0x7f,
  0xe6,
  0x66,
  0x3c
};
const uint8_t mon7_bitmap[] U8G_PROGMEM = {
  0x38,
  0xfc,
  0xce,
  0x6f,
  0x7f,
  0xce,
  0xec,
  0x38
};
int rock_x[17]={120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120},rock_y[17]={0,0,7,14,21,48,56,32,40,48,56,0,7,14,21,28,35};     //rock  move
int snow_x[7]={120,120,128,136,136,128,120},snow_y[7]={0,50,42,34,66,58,50},hitwall[7]={0,0,0,0,0,0,0};     //snow  move

int mon_x[55]={0,130,140,150,160,140,120,130,140,130,150,210,180,140,130,120,100,128,128,128,110,128,128,128,130,140,150,160,140,120,130,140,130,150,210,180,140,130,120,128,128,128,128,128,128,128,128,128,140,150,160,110,128,128,128};//54个
int mon_y[55]={0,10,20,50,40,10,50,20,40,30,40,10,10,20,30,40,80,64,70,68,-10,0,-20,-30,10,20,50,30,10,30,40,50,30,40,10,10,20,30,40,-10,0,-20,-30,80,64,70,68,10,20,50,40,-10,0,-20,-30};
int x[34]={1,1,1,1,1,1,2,3,4,5,6,7,8,9,10,11,12,4,4,4,4,4,4,4,4,4,4,4,4,4,5,6,5,6};//点17是头
int y[34]={30,31,32,33,34,32,32,32,32,32,32,32,32,32,32,32,32,26,27,28,29,30,31,32,33,34,35,36,37,38,30,30,34,34};//点5，6为机翼
int m[5]={0},n[5]={0};
int a;
int dir[6][2]={{3,0},{-3,0},{0,-3},{0,3},{0,0},{0,0}};
int s=0; //s是第s+1发子弹
int p[66]={0};
int read_joy()
{
    int x;
    x=analogRead(A0);
    if (x>650&&x<750) 
         { return 0;
         Serial.println("1");}
    if (x<400&&x>300) 
       { return 1;
         Serial.println("2");}
    if (x>450&&x<550) 
        {return 2;
         Serial.println("3");}
    if (x>800&&x<900) 
        {return 3;
         Serial.println("4");}
        if(x==0)
        return 5;
       else
      {return 4;
        Serial.println("0");}
        
}
void shoot()
{
  if(a==5)
 { m[s%4]=x[16];
  n[s%4]=y[16];
  s++;}
  }
  void zhan()
{
   
for(int i=1;i<=6;i++)
   {
    for(int j=0;j<=4;j++)
    { 
      if(m[j]-snow_x[i]<=8&&m[j]-snow_x[i]>=0&&n[j]-snow_y[i]<=8&&n[j]-snow_y[i]>=0)
     { m[j]=0;n[j]=0;p[i]=1;
     snow_x[i]=-8;snow_y[i]=-8;
     }
      }
    }
    if(millis()>=40000)
    {for(int j=0;j<=4;j++)
    { 
      if((m[j]-110)*(m[j]-110)+(n[j]-32)*(n[j]-32)<=100)
     { m[j]=0;n[j]=0;p[63]+=1;}
      }}
    
  
  for(int i=1;i<=54;i++)
{
   for(int j=0;j<=4;j++)
   {
      if(m[j]-mon_x[i]<=7&&m[j]-mon_x[i]>=0&&n[j]-mon_y[i]<=7&&n[j]-mon_y[i]>=0)
     { 
      m[j]=0;n[j]=0;p[i+6]=1;mon_x[i]=-8;mon_y[i]=-8;
     }
    }
  }
  }
  void dead()
  {
for(int i=1;i<=6;i++)
   {
    for(int j=0;j<=33;j++)
    { 
       if(x[j]-snow_x[i]<=7&&x[j]-snow_x[i]>=0&&y[j]-snow_y[i]<=7&&y[j]-snow_y[i]>=0)
     p[65]=1;
     
    }}
 for(int i=1;i<=13;i++)
   {
   if(i==7)
   i++;
    for(int j=0;j<=33;j++)
    { 
      if(x[j]-rock_x[i]<=6&&x[j]-rock_x[i]>=0&&y[j]-rock_y[i]<=6&&y[j]-rock_y[i]>=1)
     p[65]=1;
     
      }
    }
    
   for(int i=1;i<=54;i++)
{
   for(int j=0;j<=33;j++)
   {
      if(x[j]-mon_x[i]<=7&&x[j]-mon_x[i]>=0&&y[j]-mon_y[i]<=7&&y[j]-mon_y[i]>=0)
        p[65]=1;
     
    }
  }
if(millis()>=40000)
{for(int j=0;j<=33;j++)
    { 
      if((x[j]-110)*(x[j]-110)+(y[j]-32)*(y[j]-32)<=100)
       p[65]=1;
      }
    }
if(millis()>=44000&&millis()<=46000)
{for(int j=0;j<=33;j++)
  {
    if(y[j]>=0&&y[j]<=4)
        p[65]=1;
        if(y[j]>=30&&y[j]<=34)
        p[65]=1;
        if(y[j]>=60&&y[j]<=64)
        p[65]=1;
    }
}
if(millis()>=50000&&millis()<=52000)
{
 for(int j=0;j<=33;j++)
  {
    if(y[j]>=19&&y[j]<=23)
        p[65]=1;
        if(y[j]>=42&&y[j]<=46)
        p[65]=1;
  }
}
if(millis()>=56000&&millis()<=58000)
{
  for(int j=0;j<=33;j++)
  {
    if(y[j]>=0&&y[j]<=4)
        p[65]=1;
        if(y[j]>=30&&y[j]<=34)
        p[65]=1;
        if(y[j]>=60&&y[j]<=64)
        p[65]=1;
        }
}
        if(millis()>=62000&&millis()<=64000)
  {
 for(int j=0;j<=33;j++)
  {
    if(y[j]>=19&&y[j]<=23)
        p[65]=1;
        if(y[j]>=42&&y[j]<=46)
        p[65]=1;
  }
}
if(millis()>=68000&&millis()<=70000)
{
  for(int j=0;j<=33;j++)
  {
    if(y[j]>=0&&y[j]<=4)
        p[65]=1;
        if(y[j]>=30&&y[j]<=34)
        p[65]=1;
        if(y[j]>=60&&y[j]<=64)
        p[65]=1;
        }
}
if(millis()>=74000&&millis()<=76000)
{
  for(int j=0;j<=33;j++)
  {
    if(y[j]>=19&&y[j]<=23)
        p[65]=1;
        if(y[j]>=42&&y[j]<=46)
        p[65]=1;
  }
}
   }



    
  void qu()
  {
    for(int i=0;i<=4;i++)
    if(m[i]>=128)
    m[i]=0;
    for(int i=0;i<=33;i++)
    {if(x[i]<=0)
    x[i]+=128;
    if(y[i]<=0)
    y[i]+=64;
     if(y[i]>=64)
    y[i]-=128;
    }
    }
    
void go()
{
  a=read_joy();
  for(int i=0;i<=33;i++)
  {
    x[i]+=dir[a][0];
    y[i]+=dir[a][1];
  }
  }

void setup()
{
  Serial.begin(115200);
  };
void loop()
{  
u8g.firstPage();do{setFont_L;
  if(p[65]==0&&p[63]<=23)
{if(p[65]==0)
 {
 for(int i=0;i<=33;i++)
 u8g.drawPixel(x[i],y[i]);}
 for(int i=0;i<=4;i++)
 {
  if(m[i]>0)
  {u8g.drawPixel(m[i],y[i]);
  m[i]++;}
  }
 


if(millis()>=0&&millis()<=20000)
{
  u8g.drawBitmapP(rock_x[1],rock_y[1], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[2],rock_y[2], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[3],rock_y[3], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[4],rock_y[4], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[5],rock_y[5], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[6],rock_y[6], 1, 7, rock_bitmap);
}
if(millis()>=3000&&millis()<=20000)
{ for(int i=1;i<=3;i++)
   {if(p[i]==0)
  u8g.drawBitmapP(snow_x[i],snow_y[i], 1, 8,snow_bitmap);}
}
if(millis()>=4000&&millis()<=27000)
{ for(int i=1;i<=4;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon1_bitmap);}
}
if(millis()>=6000&&millis()<=20000)
{for(int i=5;i<=8;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 9,mon2_bitmap);}
}
if(millis()>=8000&&millis()<=21500)
{for(int i=9;i<=11;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon3_bitmap);}
}
if(millis()>=10000&&millis()<=23500)
{for(int i=12;i<=15;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon4_bitmap);}
}
if(millis()>=12000&&millis()<=24500)
{for(int i=16;i<=19;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon5_bitmap);}
}
if(millis()>=13500&&millis()<=26500)
{for(int i=20;i<=23;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 9,mon6_bitmap);}
}
if(millis()>=14500&&millis()<=29500)
{for(int i=4;i<=5;i++)
  {if(p[i]==0)
  u8g.drawBitmapP(snow_x[i],snow_y[i], 1, 8,snow_bitmap);}
}
if(millis()>=16500&&millis()<=39500)
{for(int i=24;i<=27;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon1_bitmap);}
}
if(millis()>=18000&&millis()<=38000)
{
  
  u8g.drawBitmapP(rock_x[9],rock_y[9], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[10],rock_y[10], 1, 7, rock_bitmap);
}
if(millis()>=20000&&millis()<=34000)
{for(int i=28;i<=31;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 9,mon2_bitmap);}
 
}
if(millis()>=22000&&millis()<=42000)
{u8g.drawBitmapP(rock_x[11],rock_y[11], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[12],rock_y[12], 1, 7, rock_bitmap);
  u8g.drawBitmapP(rock_x[13],rock_y[13], 1, 7, rock_bitmap);
  
}
if(millis()>=24000&&millis()<=48000)
{for(int i=32;i<=34;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon3_bitmap);}
  
}
if(millis()>=25000&&millis()<=37500)
{for(int i=35;i<=38;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon4_bitmap);}
}
if(millis()>=27000&&millis()<=39500)
{for(int i=39;i<=42;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 9,mon6_bitmap);}
}
if(millis()>=30000&&millis()<=42500)
{for(int i=43;i<=46;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon5_bitmap);}
}
if(millis()>=32000&&millis()<=55000)
{for(int i=47;i<=50;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon1_bitmap);}
}
if(millis()>=34000&&millis()<=46500)
{for(int i=51;i<=54;i++)
  {if(p[i+6]==0)
  u8g.drawBitmapP(mon_x[i],mon_y[i], 1, 8,mon7_bitmap);}
}
if(millis()>=40000)
{if(p[63]<=20)
   {u8g.drawEllipse(100,32 ,10,30);   //UFO   boss
   u8g.drawDisc(110,32, 10);}
}
if(millis()>=42000&&millis()<=44000)
{
  u8g.drawDisc(88,2,2);
  u8g.drawDisc(88,32,2);
  u8g.drawDisc(88,62,2);
}
if(millis()>=44000&&millis()<=46000)
{
  u8g.drawBox(0,0,90,4);
  u8g.drawBox(0,30,90,4);
  u8g.drawBox(0,60,90,4);
}
if(millis()>=48000&&millis()<=50000)
{
   u8g.drawDisc(88,21,2);
  u8g.drawDisc(88,44,2);
}
if(millis()>=50000&&millis()<=52000)
{
  u8g.drawBox(0,19,90,4);
  u8g.drawBox(0,42,90,4);
}
if(millis()>=54000&&millis()<=56000)
{
  u8g.drawDisc(88,2,2);
  u8g.drawDisc(88,32,2);
  u8g.drawDisc(88,62,2);
}
if(millis()>=56000&&millis()<=58000)
{
  u8g.drawBox(0,0,90,4);
  u8g.drawBox(0,30,90,4);
  u8g.drawBox(0,60,90,4);
}
if(millis()>=60000&&millis()<=62000)
{
   u8g.drawDisc(88,21,2);
  u8g.drawDisc(88,44,2);
}
if(millis()>=62000&&millis()<=64000)
{
  u8g.drawBox(0,19,90,4);
  u8g.drawBox(0,42,90,4);
}
if(millis()>=66000&&millis()<=68000)
{
  u8g.drawDisc(88,2,2);
  u8g.drawDisc(88,32,2);
  u8g.drawDisc(88,62,2);
}
if(millis()>=68000&&millis()<=70000)
{
  u8g.drawBox(0,0,90,4);
  u8g.drawBox(0,30,90,4);
  u8g.drawBox(0,60,90,4);
}
if(millis()>=72000&&millis()<=74000)
{
   u8g.drawDisc(88,21,2);
  u8g.drawDisc(88,44,2);
}
if(millis()>=74000&&millis()<=76000)
{
  u8g.drawBox(0,19,90,4);
  u8g.drawBox(0,42,90,4);
}
}
else if(p[65]==1)
{
  u8g.setPrintPos(32,32);
  u8g.print("GAME OVER");
  }
  else if(p[63]>=23)
  {u8g.setPrintPos(32,32);
   u8g.print("YOU WIN");}

}while(u8g.nextPage());

  if(millis()>=0&&millis()<=20000)     for(int k=1;k<=6;k++)rock_x[k]--;
  if(millis()>=3000&&millis()<=20000)  for(int k=1;k<=3;k++)snow_x[k]--;
  if(millis()>=4000&&millis()<=27000)  for(int k=1;k<=4;k++)mon_x[k]--;
  if(millis()>=6000&&millis()<=20000)  for(int k=5;k<=8;k++)mon_x[k]-=2;
  if(millis()>=8000&&millis()<=21500)  for(int k=9;k<=11;k++)mon_x[k]-=2;
  if(millis()>=10000&&millis()<=23500) for(int k=12;k<=15;k++)mon_x[k]-=2;
  if(millis()>=12000&&millis()<=24500) for(int k=16;k<=19;k++)mon_y[k]-=2;
  if(millis()>=13500&&millis()<=26500) for(int k=20;k<=23;k++)mon_y[k]+=2;
  if(millis()>=14500&&millis()<=29500) for(int k=4;k<=5;k++)snow_x[k]--;
  if(millis()>=16500&&millis()<=39500) for(int k=24;k<=27;k++)mon_x[k]--;
  if(millis()>=18000&&millis()<=38000) for(int k=7;k<=10;k++)rock_x[k]--;
  if(millis()>=20000&&millis()<=34000) for(int k=28;k<=31;k++)mon_x[k]-=2;
  if(millis()>=22000&&millis()<=42000) for(int k=11;k<=16;k++)rock_x[k]--;
  if(millis()>=24000&&millis()<=38000) for(int k=32;k<=34;k++)mon_x[k]-=2;
  if(millis()>=25000&&millis()<=37500) for(int k=35;k<=38;k++)mon_x[k]-=2;
  if(millis()>=27000&&millis()<=39500) for(int k=39;k<=42;k++)mon_y[k]+=2;
  if(millis()>=30000&&millis()<=42500) for(int k=43;k<=46;k++)mon_y[k]-=2;
  if(millis()>=32000&&millis()<=50000) for(int k=47;k<=50;k++)mon_x[k]-=2;
  if(millis()>=34000&&millis()<=46500) for(int k=51;k<=54;k++)mon_y[k]+=2;
for(int k=1;k<=3;k++)
   {if(snow_y[k]==0||snow_y[k]==60)hitwall[k]++;
     if(hitwall[k]%2==0)snow_y[k]+=2;
     else snow_y[k]-=2;}
for(int k=4;k<=5;k++)
   {if(snow_y[k]==0||snow_y[k]==60)hitwall[k]++;
     if(hitwall[k]%2==0)snow_y[k]-=2;
     else snow_y[k]+=2;}
     read_joy();
     shoot();
     zhan();
     dead();
     go();
     qu();

     }
